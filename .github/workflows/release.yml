name: Release

env:
  MAVEN_ARGS: -B -e

on:
  workflow_dispatch:
  pull_request:
    types: [closed]
    paths:
      - '.github/project.yml'
jobs:
  release:
    runs-on: ubuntu-latest
    name: release
    strategy:
      matrix:
        java: [8]
        profile: [normal]
    if: ${{github.event_name == 'workflow_dispatch' || github.event.pull_request.merged == true}}
    steps:
      - uses: actions/checkout@v2
        name: Checkout
      - uses: radcortez/project-metadata-action@main
        name: Retrieve project metadata
        id: metadata
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          metadata-file-path: '.github/project.yml'
          local-file: true
      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          java-version: 8
          distribution: 'temurin'
          server-id: oss-sonatype-staging
          server-username: OSS_SONATYPE_USERNAME
          server-password: OSS_SONATYPE_PASSWORD
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE
      - name: Install prerequisites
        run: |
          if [ -f $JAVA_HOME/lib/tools.jar ]; then
            ./mvnw install:install-file -Dfile=$JAVA_HOME/lib/tools.jar -DgroupId=com.sun -DartifactId=tools -Dversion=8 -Dpackaging=jar -P${{ matrix.profile }};
          fi
      - name: Configure Git author
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
      - name: Setup jbang
        run: curl -Ls https://sh.jbang.dev | bash -s - app setup
      - name: Maven release ${{steps.metadata.outputs.current-version}}
        run: |
          ./mvnw clean install -DskipTests -Prelease -Dformat.skip=true
          git checkout -b release
          ./mvnw -Prelease release:clean release:prepare -DreleaseVersion=${{steps.metadata.outputs.current-version}} -DdevelopmentVersion=${{steps.metadata.outputs.next-version}} -Dformat.skip=true
          git checkout ${{github.base_ref}}
          git rebase release
          ./mvnw -Prelease release:perform -DskipTests -Dformat.skip=true
          # checkout release tag
          git checkout ${{steps.metadata.outputs.current-version}}
          # update examples and tests
          ./mvnw versions:set -DnewVersion=${{steps.metadata.outputs.next-version}} -Pwith-examples,with-tests -DgenerateBackupPoms=false -DoldVersion=* -DgroupId=* -DartifactId=* -Dformat.skip=true
          # commit changes
          git add --all
          if git diff-index --quiet HEAD --; then
              echo "No changes to commit."
          else
            git commit -m "chore: Set examples and tests version to ${{steps.metadata.outputs.current-version}}"
          fi
          git push origin ${{steps.metadata.outputs.current-version}}
          # checkout release branch
          git checkout ${{github.base_ref}}
          # update examples and tests
          ./mvnw versions:set -DnewVersion=${{steps.metadata.outputs.next-version}} -Pwith-examples,with-tests -DgenerateBackupPoms=false -DoldVersion=* -DgroupId=* -DartifactId=* -Dformat.skip=true
          # commit changes
          git add --all
          if git diff-index --quiet HEAD --; then
              echo "No changes to commit."
          else
            git commit -m "chore: Set examples and tests version to ${{steps.metadata.outputs.current-version}}"
          fi
          git push origin ${{github.base_ref}}
        env:
          OSS_SONATYPE_USERNAME: ${{ secrets.OSS_SONATYPE_USERNAME }}
          OSS_SONATYPE_PASSWORD: ${{ secrets.OSS_SONATYPE_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
